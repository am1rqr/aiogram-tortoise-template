from aiogram import Router, F
from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from bot.keyboards.builders import back_to_builder, approval_builder, button_builder
from bot.states.admins import Mailing
from database.commands.user import get_all_users
from main import bot

router = Router()


@router.callback_query(F.data == "mailing")
async def mailing(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.edit_text("<b>üìù –ü—Ä–∏—à–ª–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:</b>",
                                 reply_markup=back_to_builder("admin_panel"))
    await state.set_state(Mailing.media)


@router.message(Mailing.media)
async def get_mailing_media(message: Message, state: FSMContext) -> None:
    await state.update_data(text=message.html_text)
    if message.photo:
        photo = message.photo[-1]
        await state.update_data(photo=photo.file_id)

    await message.answer("<b>‚å®Ô∏è –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏::–°—Å—ã–ª–∫–∞</i></b>",
                         reply_markup=button_builder("‚ùå–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "approval_mailing"))
    await state.set_state(Mailing.keyboard)


@router.message(Mailing.keyboard)
async def get_mailing_keyboard(message: Message, state: FSMContext) -> None:
    if "::" not in message.text or message.text.count("::") > 1:
        await message.answer("<b>üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>",
                             reply_markup=back_to_builder("mailing"))
        return

    keyboard = message.text.split("::")
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=keyboard[0], url=keyboard[1])]
    ])
    await state.update_data(markup=markup)

    data = await state.get_data()
    text: str = data.get("text")
    photo: str = data.get("photo")

    if photo:
        await message.answer_photo(photo=photo,
                                   caption=text,
                                   reply_markup=markup)
    else:
        await message.answer(text,
                             reply_markup=markup)

    await message.answer("<b>‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</b>",
                         reply_markup=approval_builder("approval_mailing", "mailing"))


@router.callback_query(F.data == "approval_mailing")
async def approval_mailing(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    text: str = data.get("text")
    photo: str = data.get("photo")
    markup: InlineKeyboardMarkup | None = data.get("markup")

    await call.message.edit_text("<i>üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...</i>")

    not_delivered_count = 0

    users = await get_all_users()
    for user in users:
        try:
            if photo:
                await bot.send_photo(chat_id=user.user_id,
                                     photo=photo,
                                     caption=text,
                                     reply_markup=markup)
            else:
                await bot.send_message(chat_id=user.user_id,
                                       text=text,
                                       reply_markup=markup)
        except TelegramAPIError:
            not_delivered_count += 1

    delivered_count = len(users) - not_delivered_count

    await call.message.answer(f"<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                              f"<b>üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <i>{delivered_count}</i></b>\n"
                              f"<b>‚ùóÔ∏è–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <i>{not_delivered_count}</i></b>",
                              reply_markup=back_to_builder("admin_panel"))
    await state.clear()
